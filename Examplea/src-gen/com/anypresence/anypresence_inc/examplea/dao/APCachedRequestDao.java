package com.anypresence.anypresence_inc.examplea.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.examplea.dao.APCachedRequest;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APCACHED_REQUEST.
 */
public class APCachedRequestDao extends AbstractDao<APCachedRequest, Long> {

	public static final String TABLENAME = "APCACHED_REQUEST";

	/**
	 * Properties of entity APCachedRequest.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Scope = new Property(1, String.class,
				"scope", false, "SCOPE");
		public final static Property Type = new Property(2, String.class,
				"type", false, "TYPE");
		public final static Property Parameter = new Property(3, String.class,
				"parameter", false, "PARAMETER");
		public final static Property _cacheUpdatedAt = new Property(4,
				java.util.Date.class, "_cacheUpdatedAt", false,
				"_CACHE_UPDATED_AT");
	};

	public APCachedRequestDao(DaoConfig config) {
		super(config);
	}

	public APCachedRequestDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'APCACHED_REQUEST' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'SCOPE' TEXT," + // 1: scope
				"'TYPE' TEXT," + // 2: type
				"'PARAMETER' TEXT," + // 3: parameter
				"'_CACHE_UPDATED_AT' INTEGER);"); // 4: _cacheUpdatedAt
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'APCACHED_REQUEST'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, APCachedRequest entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String scope = entity.getScope();
		if (scope != null) {
			stmt.bindString(2, scope);
		}

		String type = entity.getType();
		if (type != null) {
			stmt.bindString(3, type);
		}

		String parameter = entity.getParameter();
		if (parameter != null) {
			stmt.bindString(4, parameter);
		}

		java.util.Date _cacheUpdatedAt = entity.get_cacheUpdatedAt();
		if (_cacheUpdatedAt != null) {
			stmt.bindLong(5, _cacheUpdatedAt.getTime());
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public APCachedRequest readEntity(Cursor cursor, int offset) {
		APCachedRequest entity = new APCachedRequest(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // scope
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parameter
				cursor.isNull(offset + 4) ? null : new java.util.Date(cursor
						.getLong(offset + 4)) // _cacheUpdatedAt
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, APCachedRequest entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setScope(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setType(cursor.isNull(offset + 2) ? null : cursor
				.getString(offset + 2));
		entity.setParameter(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.set_cacheUpdatedAt(cursor.isNull(offset + 4)
				? null
				: new java.util.Date(cursor.getLong(offset + 4)));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(APCachedRequest entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(APCachedRequest entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
