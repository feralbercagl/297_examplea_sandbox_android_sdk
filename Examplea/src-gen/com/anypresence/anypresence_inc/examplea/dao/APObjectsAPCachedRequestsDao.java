package com.anypresence.anypresence_inc.examplea.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.anypresence.anypresence_inc.examplea.dao.APObjectsAPCachedRequests;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APOBJECTS_APCACHED_REQUESTS.
 */
public class APObjectsAPCachedRequestsDao
		extends
			AbstractDao<APObjectsAPCachedRequests, Void> {

	public static final String TABLENAME = "APOBJECTS_APCACHED_REQUESTS";

	/**
	 * Properties of entity APObjectsAPCachedRequests.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property ApObjectId = new Property(0, Long.class,
				"apObjectId", false, "AP_OBJECT_ID");
		public final static Property ApCachedRequestId = new Property(1,
				Long.class, "apCachedRequestId", false, "AP_CACHED_REQUEST_ID");
	};

	public APObjectsAPCachedRequestsDao(DaoConfig config) {
		super(config);
	}

	public APObjectsAPCachedRequestsDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint
				+ "'APOBJECTS_APCACHED_REQUESTS' (" + //
				"'AP_OBJECT_ID' INTEGER," + // 0: apObjectId
				"'AP_CACHED_REQUEST_ID' INTEGER);"); // 1: apCachedRequestId
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'APOBJECTS_APCACHED_REQUESTS'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt,
			APObjectsAPCachedRequests entity) {
		stmt.clearBindings();

		Long apObjectId = entity.getApObjectId();
		if (apObjectId != null) {
			stmt.bindLong(1, apObjectId);
		}

		Long apCachedRequestId = entity.getApCachedRequestId();
		if (apCachedRequestId != null) {
			stmt.bindLong(2, apCachedRequestId);
		}
	}

	/** @inheritdoc */
	@Override
	public Void readKey(Cursor cursor, int offset) {
		return null;
	}

	/** @inheritdoc */
	@Override
	public APObjectsAPCachedRequests readEntity(Cursor cursor, int offset) {
		APObjectsAPCachedRequests entity = new APObjectsAPCachedRequests( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // apObjectId
				cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // apCachedRequestId
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, APObjectsAPCachedRequests entity,
			int offset) {
		entity.setApObjectId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setApCachedRequestId(cursor.isNull(offset + 1) ? null : cursor
				.getLong(offset + 1));
	}

	/** @inheritdoc */
	@Override
	protected Void updateKeyAfterInsert(APObjectsAPCachedRequests entity,
			long rowId) {
		// Unsupported or missing PK type
		return null;
	}

	/** @inheritdoc */
	@Override
	public Void getKey(APObjectsAPCachedRequests entity) {
		return null;
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
