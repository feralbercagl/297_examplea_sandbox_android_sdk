package com.anypresence.sdk.examplea.models;

//
//  Examaobjectmodel.java
//  
//
//  Generated by AnyPresence, Inc on 2014-12-18
//  Copyright (c) 2014. All rights reserved.
//

import com.google.common.util.concurrent.*;
import java.util.*;
import java.util.concurrent.Callable;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.EqualsBuilder;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.lang.reflect.Field;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import com.anypresence.rails_droid.*;
import com.anypresence.sdk.acl.*;
import com.anypresence.sdk.callbacks.*;
import com.anypresence.sdk.query.*;
import com.anypresence.sdk.config.Config;
import com.anypresence.sdk.acl.UnauthorizedException;
import com.anypresence.sdk.*;
import com.anypresence.sdk.cache.*;
import com.anypresence.sdk.cache.greendao.*;
import com.anypresence.sdk.parse.*;

import static com.anypresence.sdk.APSDKSetup.DEBUG_MODE;

/**
 * This class represents a model constructed from the Designer.
 *
 * Fields that are to be serialized into json must be annotated with <tt>@Expose</tt>.
 */
public final class Examaobjectmodel extends com.anypresence.sdk.APObject {
	private static final long serialVersionUID = 1L;

	private static final Log log = LogFactory.getLog(Examaobjectmodel.class);

	private static final String TAG = "Examaobjectmodel";

	/**
	 *  Scope names for Examaobjectmodel.
	 */
	public static class Scopes {

		public final static String ALL = "all";

		public final static String EXACT_MATCH = "exact_match";

		public final static String COUNT = "count";

		public final static String COUNT_EXACT_MATCH = "count_exact_match";

	}

	@SerializedName("id")
	@Expose
	private ObjectId id;
	// Getter/Setter for the id
	@Override
	public ObjectId getObjectId() {
		return id;
	}

	@Override
	public void setObjectId(ObjectId id) {
		this.id = id;
	}

	public ObjectId getId() {
		return getObjectId();
	}

	public void setId(ObjectId id) {
		setObjectId(id);
	}

	public void setIdAsString(String id) {
		setObjectId(new ObjectId(id));
	}

	// Getters/setters for field definitions.

	@SerializedName("creation_date")
	@Expose
	private Date creationDate;

	public Date getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	@SerializedName("name")
	@Expose
	private String name;

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Copies provided object.
	 */
	public static final Examaobjectmodel copy(Examaobjectmodel orig) {
		final Examaobjectmodel newObject = new Examaobjectmodel();

		if (orig.getId() != null)
			newObject.setId(new ObjectId(orig.getId()));

		if (orig.getCreationDate() != null)
			newObject
					.setCreationDate(new Date(orig.getCreationDate().getTime()));

		if (orig.getName() != null)
			newObject.setName(new String(orig.getName()));

		return newObject;
	}

	// Query scopes
	private static Map<String, QueryScope> queryScopes = new HashMap<String, QueryScope>();

	public void setQueryScopes(Map<String, QueryScope> queryScopes) {
		this.queryScopes = queryScopes;
	}

	public static Map<String, QueryScope> getQueryScopes() {
		return queryScopes;
	}

	static {

		QueryScope queryScopeall = new QueryScope();
		queryScopeall.setName("all");

		queryScopes.put(queryScopeall.getName(), queryScopeall);

		QueryScope queryScopeexact_match = new QueryScope();
		queryScopeexact_match.setName("exact_match");

		queryScopes.put(queryScopeexact_match.getName(), queryScopeexact_match);

		QueryScope queryScopecount = new QueryScope();
		queryScopecount.setName("count");

		queryScopes.put(queryScopecount.getName(), queryScopecount);

		QueryScope queryScopecount_exact_match = new QueryScope();
		queryScopecount_exact_match.setName("count_exact_match");

		queryScopes.put(queryScopecount_exact_match.getName(),
				queryScopecount_exact_match);

	}

	/**
	 * Fetches a <tt>Examaobjectmodel</tt> with the provided <tt>objectId</tt>.
	 *
	 * @param objectId the id of the object
	 * @return an instance of <tt>Examaobjectmodel</tt>
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static Examaobjectmodel fetch(String objectId)
			throws RemoteRequestException {
		return com.anypresence.sdk.APObject.fetch(objectId,
				Examaobjectmodel.class);
	}

	/**
	 * Fetches a <tt>Examaobjectmodel</tt> with the provided <tt>objectId</tt> in the background.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Examaobjectmodel.fetchInBackground("123", new APCallback<Examaobjectmodel>() {
	 *     
	 *     public void finished(Examaobjectmodel object, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Object fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch object!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param objectId the id of the object
	 * @param futureCallback the callback that handles the result of the request.
	
	 * @return the cached <tt>Examaobjectmodel</tt> if it exists, otherwise, null.
	
	 */
	public static Examaobjectmodel

	fetchInBackground(String objectId,
			IAPFutureCallback<Examaobjectmodel> futureCallback) {

		return com.anypresence.sdk.APObject.fetchInBackground(objectId,
				Examaobjectmodel.class, futureCallback);

	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<Examaobjectmodel> query(String scope)
			throws RemoteRequestException {
		return query(scope, null, null, null);
	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<Examaobjectmodel> query(String scope,
			Map<String, String> params, Integer offset, Integer limit)
			throws RemoteRequestException {
		return com.anypresence.sdk.APObject.query(scope, params, offset, limit,
				Examaobjectmodel.class);
	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<Examaobjectmodel> query(String scope,
			Map<String, String> params) throws RemoteRequestException {
		return query(scope, params, null, null);
	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> and other params.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static List<Examaobjectmodel> queryInBackground(final String scope,
			Map<String, String> params,
			IAPFutureCallback<List<Examaobjectmodel>> futureCallback) {

		return com.anypresence.sdk.APObject.queryInBackground(scope, params,
				null, null, Examaobjectmodel.class, futureCallback);

	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Examaobjectmodel.queryInBackground("all", new APCallback<List<Examaobjectmodel>>() {
	 *     
	 *     public void finished(List<Examaobjectmodel> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>Examaobjectmodel</tt> objects.
	 */
	public static List<Examaobjectmodel> queryInBackground(String scope,
			IAPFutureCallback<List<Examaobjectmodel>> futureCallback) {

		return queryInBackground(scope, null, null, null, futureCallback);

	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Examaobjectmodel.queryInBackground("all", 0, 25, new APCallback<List<Examaobjectmodel>>() {
	 *     
	 *     public void finished(List<Examaobjectmodel> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 * @return list of cached <tt>Examaobjectmodel</tt> objects.
	 */
	public static List<Examaobjectmodel> queryInBackground(String scope,
			Integer offset, Integer limit,
			IAPFutureCallback<List<Examaobjectmodel>> futureCallback) {

		return queryInBackground(scope, null, offset, limit, futureCallback);

	}

	/**
	 * Queries for <tt>Examaobjectmodel</tt> with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * Examaobjectmodel.queryInBackground("all", params, 0, 25, new APCallback<List<Examaobjectmodel>>() {
	 *     
	 *     public void finished(List<Examaobjectmodel> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static List<Examaobjectmodel> queryInBackground(final String scope,
			Map<String, String> params, Integer offset, Integer limit,
			IAPFutureCallback<List<Examaobjectmodel>> futureCallback) {

		return com.anypresence.sdk.APObject.queryInBackground(scope, params,
				offset, limit, Examaobjectmodel.class, futureCallback);

	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt>.
	 *
	 * Note: the scopes were defined from the Designer.
	 *
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @throws RemoteRequestException If there are other issues with the request.
	 */
	public static String aggregateQuery(String scope, Map<String, String> params)
			throws RemoteRequestException {
		return com.anypresence.sdk.APObject.aggregateQuery(scope, params,
				Examaobjectmodel.class);
	}

	/**
	 * Performs aggregate query with the provided <tt>scope</tt> in the background.
	 *
	 * Note: the scopes were defined from the Designer.
	 * <p>
	 * The {@link import com.anypresence.sdk.callbacks.APCallback} callback allows you to run code in the main UI thread.
	 * </p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * Examaobjectmodel.aggregateQueryInBackground("count", params, new APCallback<String>() {
	 *     
	 *     public void finished(String count, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "success");
	 *         } else {
	 *             Log.e(TAG, "failure", ex);
	 *         }
	 *     }
	 * });
	 * }
	 * </pre>
	 *
	 * @see import com.anypresence.sdk.callbacks.APCallback
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param futureCallback the callback that handles the result of the request.
	 */
	public static void aggregateQueryInBackground(String scope,
			Map<String, String> params, IAPFutureCallback<String> futureCallback) {
		com.anypresence.sdk.APObject.aggregateQueryInBackground(scope, params,
				Examaobjectmodel.class, futureCallback);
	}

	/**
	 * Deletes all data in cache for <tt>Examaobjectmodel</tt>.
	 */
	public static void deleteAllInCache() {
		com.anypresence.sdk.APObject.deleteAllInCache();
	}

	/**
	 * Loads all <tt>Examaobjectmodel</tt> objects in local cache.
	 *
	 * @return list of <tt>Examaobjectmodel</tt>
	 */
	public static List<Examaobjectmodel> loadAllInCache() {
		return com.anypresence.sdk.APSDKSetup.getCacheManager().loadAllInCache(
				Examaobjectmodel.class);
	}

	/**
	 * Loads <tt>Examaobjectmodel</tt> objects in local cache.
	 *
	 * @param offset the offset
	 * @param limit the limit
	 * @return list of <tt>Examaobjectmodel</tt>
	 */
	public static List<Examaobjectmodel> loadInCache(Integer offset,
			Integer limit) {
		return null;
	}

	/**
	 * Updates object in cache if the object id is not null.
	 */
	public void updateInCache() {
		com.anypresence.sdk.APSDKSetup.getCacheManager().updateInCache(
				Examaobjectmodel.class, this);
	}

	/**
	 * Saves object into cache.
	 */
	public void saveInCache() {
		saveInCache(null);
	}

	/**
	 * Saves object into cache with provided scope.
	 */
	public void saveInCache(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager().saveInCache(
				Examaobjectmodel.class, this, scope);
	}

	/**
	 * Saves object into cache with provided <tt>APCachedRequest</tt>.
	 */
	public void saveInCacheWithRequest(IAPCachedRequest request) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.saveInCacheWithRequest(Examaobjectmodel.class, this, request);
	}

	/**
	 * Deletes all <tt>Examaobjectmodel</tt> objects in cache that has
	 * this instance's object id.
	 */
	public void deleteInCache() {
		if (this.getObjectId() != null) {
			deleteAllInCacheWithObjectIdPredicate(this.getObjectId()
					.stringify());
		} else {
			log.info("Cannot delete in local cache since the objectId is not set");
		}
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided remote object id.
	 * 
	 * @param objectId the remote object id.
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithObjectIdPredicate(
			String objectId) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithObjectIdPredicate(Examaobjectmodel.class,
						objectId);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache by searching for requests matching 
	 * the exact scope and parameters provided.
	 * <p>
	 * Example:
	 * </p>
	 * <pre>
	 * {@code
	 * Map<String,String> params = new HashMap<String,String>();
	 * params.put("name", "test");
	 * Examaobjectmodel.queryInBackground("all", params, new APCallback<List<Examaobjectmodel>>() {
	 *     
	 *     public void finished(List<Examaobjectmodel> objects, Throwable ex) {
	 *         if (ex == null) {
	 *             Log.i(TAG, "Objects fetched!");
	 *         } else {
	 *             Log.e(TAG, "Unable to fetch objects!", ex);
	 *         }
	 *     }
	 * });
	 * // Get the cached objects from the above query.
	 * Examaobjectmodel.fetchInCacheWithParameterPredicate("all", params);
	 * }
	 *
	 * </pre>
	 * 
	 * @param scope the scope 
	 * @param params the parameter
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithParameterPredicate(
			String scope, Map<String, String> params) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithParameterPredicate(Examaobjectmodel.class,
						scope, params);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithScopePredicate(
			String scope, Integer offset, Integer limit) {
		return fetchInCacheWithScopePredicate(scope, null, offset, limit);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithScopePredicate(
			String scope) {
		return fetchInCacheWithScopePredicate(scope, null, null);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided scope.
	 * 
	 * @param scope the scope
	 * @param params the parameters
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params) {
		return fetchInCacheWithScopePredicate(scope, params, null, null);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided scope.
	 * 
	 * @param scope the scope.
	 * @param params the parameters
	 * @param offset the offset
	 * @param limit the limit
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithScopePredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithScopePredicate(Examaobjectmodel.class, scope,
						params, offset, limit);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with provided request.
	 * 
	 * @param request instance of <tt>com.anypresence.anypresence_inc.examplea.dao.APCachedRequest</tt>.
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithAPCachedRequestPredicate(
			IAPCachedRequest request) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithAPCachedRequestPredicate(
						Examaobjectmodel.class, request);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with latest request.
	 * 
	 * @param scope the scope to perform the query.
	 * @param params a map of parameters.
	 * @param offset offset for the query, or <tt>null</tt> for no offset.
	 * @param limit max results to return back, <tt>null</tt> for no limit.
	 * @return a list of <tt>Examaobjectmodel</tt>;
	 */
	public static List<Examaobjectmodel> fetchInCacheWithLatestAPCachedRequestPredicate(
			String scope, Map<String, String> params, Integer offset,
			Integer limit) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithLatestAPCachedRequestPredicate(
						Examaobjectmodel.class, scope, params, offset, limit);
	}

	/**
	 * Fetches <tt>Examaobjectmodel</tt> from cache with predicates.
	 *
	 * @see com.anypresence.anypresence_inc.examplea.dao.ExamaobjectmodelDao.Properties
	 *
	 * @param predicates hash of predicates
	 * @return a list of <tt>Examaobjectmodel</tt>
	 */
	public static List<Examaobjectmodel> fetchInCacheWithPredicates(
			Map<String, String> predicates) {
		return com.anypresence.sdk.APSDKSetup.getCacheManager()
				.fetchInCacheWithPredicates(Examaobjectmodel.class, predicates);
	}

	/**
	 * Deletes <tt>Examaobjectmodel</tt> from cache matching <tt>objectId</tt>.
	 * 
	 * @param objectId the remote object id.
	 */
	public static void deleteAllInCacheWithObjectIdPredicate(String objectId) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithObjectIdPredicate(Examaobjectmodel.class,
						objectId);
	}

	/**
	 * Deletes <tt>Examaobjectmodel</tt> from cache matching <tt>scope</tt>.
	 * 
	 * @param scope the scope.
	 */
	public static void deleteAllInCacheWithScopePredicate(String scope) {
		com.anypresence.sdk.APSDKSetup.getCacheManager()
				.deleteAllInCacheWithScopePredicate(Examaobjectmodel.class,
						scope);
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 37).

		append(creationDate).

		append(name).

		append(getObjectId()).toHashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if ((obj == null) || (obj.getClass() != this.getClass()))
			return false;
		Examaobjectmodel other = (Examaobjectmodel) obj;
		return new EqualsBuilder().

		append(creationDate, other.creationDate).

		append(name, other.name).

		append(getObjectId(), other.getObjectId()).isEquals();
	}

}
